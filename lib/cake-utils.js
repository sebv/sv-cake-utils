// Generated by CoffeeScript 1.3.1
(function() {
  var cp, grepInSource, spawn;

  cp = require('child_process');

  exports.coffee = {
    compile: function(paths, watch) {
      var args;
      if (watch == null) {
        watch = false;
      }
      args = ['--compile'];
      if (watch) {
        args.push('--watch');
      }
      args = args.concat(paths);
      return spawn('coffee', args);
    }
  };

  exports.mocha = {
    test: function(dir) {
      return cp.execFile('find', [dir], function(err, stdout, stderr) {
        var files, params;
        files = (stdout.split('\n')).filter(function(name) {
          return name.match(/.+\-test.coffee/);
        });
        params = ['-R', 'spec', '--colors'].concat(files);
        return spawn('mocha', params);
      });
    }
  };

  exports.js = {
    clean: function(dirs, files) {
      return cp.execFile('find', dirs.concat(files), function(err, stdout, stderr) {
        var _files;
        _files = (stdout.split('\n')).filter(function(name) {
          return name.match(/.+\.js/);
        });
        if (_files.length > 0) {
          return spawn('rm', _files, false);
        }
      });
    }
  };

  exports.grep = {
    debug: function() {
      return grepInSource('debugger');
    },
    log: function() {
      return grepInSource('console.log');
    }
  };

  exports.grepInSource = grepInSource = function(word) {
    return cp.execFile('find', ['.'], function(err, stdout, stderr) {
      var files;
      files = (stdout.split('\n')).filter(function(name) {
        return !name.match(/\/node_modules\//);
      }).filter(function(name) {
        return !name.match(/\/\.git\//);
      }).filter(function(name) {
        return (name.match(/\.js$/)) || (name.match(/\.coffee$/));
      });
      return spawn('grep', [word].concat(files), false);
    });
  };

  exports.spawn = spawn = function(cmd, params, exitOnError) {
    var proc;
    if (exitOnError == null) {
      exitOnError = true;
    }
    proc = cp.spawn(cmd, params);
    proc.stdout.on('data', function(buffer) {
      return process.stdout.write(buffer.toString());
    });
    proc.stderr.on('data', function(buffer) {
      return process.stderr.write(buffer.toString());
    });
    return proc;
  };

}).call(this);
