// Generated by CoffeeScript 1.3.2
(function() {
  var cp, exec, grepInSource, spawn;

  cp = require('child_process');

  exports.coffee = {
    compile: function(paths, opts) {
      var args;
      args = ['--compile'];
      if (((opts != null ? opts.output : void 0) != null)) {
        args.push('--output');
        args.push(opts.output);
      }
      if ((opts != null ? opts.watch : void 0) === true) {
        args.push('--watch');
      }
      args = args.concat(paths);
      return spawn('coffee', args);
    }
  };

  exports.mocha = {
    test: function(dir, done) {
      return cp.execFile('find', [dir], function(err, stdout, stderr) {
        var args, files, proc;
        files = (stdout.split('\n')).filter(function(name) {
          return name.match(/.+\.coffee/);
        });
        args = ['-R', 'spec', '--colors'].concat(files);
        proc = spawn('mocha', args);
        return proc.on('exit', function(status) {
          if (done != null) {
            return done(status);
          }
        });
      });
    }
  };

  exports.vows = {
    test: function(dir, done) {
      return cp.execFile('find', [dir], function(err, stdout, stderr) {
        var args, files, proc;
        files = (stdout.split('\n')).filter(function(name) {
          return name.match(/.+\.coffee/);
        });
        args = ['--spec'].concat(files);
        proc = spawn('vows', args);
        return proc.on('exit', function(status) {
          if (done != null) {
            return done(status);
          }
        });
      });
    }
  };

  exports.js = {
    clean: function(dirs, files) {
      return cp.execFile('find', dirs.concat(files), function(err, stdout, stderr) {
        var _files;
        _files = (stdout.split('\n')).filter(function(name) {
          return name.match(/.+\.js/);
        });
        if (_files.length > 0) {
          return spawn('rm', _files);
        }
      });
    }
  };

  exports.grep = {
    debug: function() {
      return grepInSource('debugger');
    },
    log: function() {
      return grepInSource('console.log');
    }
  };

  exports.grepInSource = grepInSource = function(word) {
    return cp.execFile('find', ['.'], function(err, stdout, stderr) {
      var files;
      files = (stdout.split('\n')).filter(function(name) {
        return !name.match(/\/node_modules\//);
      }).filter(function(name) {
        return !name.match(/\/examples\//);
      }).filter(function(name) {
        return !name.match(/\/\.git\//);
      }).filter(function(name) {
        return (name.match(/\.js$/)) || (name.match(/\.coffee$/));
      });
      return spawn('grep', [word].concat(files));
    });
  };

  exports.killAllProc = function(procName) {
    var cmd;
    cmd = "kill -9 `ps -el | grep " + procName + " | grep -v grep | awk '{ print $2 }'`";
    return exec(cmd);
  };

  exports.spawn = spawn = function(cmd, args) {
    var proc;
    proc = cp.spawn(cmd, args);
    proc.stdout.on('data', function(buffer) {
      return process.stdout.write(buffer.toString());
    });
    proc.stderr.on('data', function(buffer) {
      return process.stderr.write(buffer.toString());
    });
    return proc;
  };

  exports.exec = exec = function(cmd) {
    var proc;
    proc = cp.exec(cmd);
    proc.stdout.on('data', function(buffer) {
      return process.stdout.write(buffer.toString());
    });
    proc.stderr.on('data', function(buffer) {
      return process.stderr.write(buffer.toString());
    });
    return proc;
  };

}).call(this);
